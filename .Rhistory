funnel.plots(dat = out_min_month$`2`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "February", axis.Ly = NULL, ylimit = c(-0.03,0.025), iter = 500)
funnel.plots(dat = out_min_month$`5`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "May", axis.Ly = NULL, ylimit = c(-0.025,0.04), iter = 500)
funnel.plots(dat = out_min_month$`8`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "August", axis.Ly = NULL, ylimit = c(-0.025,0.035), iter = 500, funnel.y = expression("Minimum-Flow | %Change"%.%"Decade"^-1))
funnel.plots(dat = out_min_month$`11`, response = "Area", yaxis.DOY = F, xAxis = T, d.xaxis = F, pane = "November", axis.Ly = NULL, iter = 500)
screen()
density_plot(out_min_month, "Area", type = "int", xlimit = c(-0.008,0.017))
density_plot(out_min_month, "Area", type = "exp", xlimit = c(-12,4))
funnel.plots(dat = out_min_month$`2`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "February", axis.Ly = NULL, ylimit = c(-0.03,0.025), iter = 500)
funnel.plots(dat = out_min_month$`5`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "May", axis.Ly = NULL, ylimit = c(-0.025,0.04), iter = 500)
funnel.plots(dat = out_min_month$`8`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "August", axis.Ly = NULL, ylimit = c(-0.025,0.032), iter = 500, funnel.y = expression("Minimum-Flow | %Change"%.%"Decade"^-1))
funnel.plots(dat = out_min_month$`11`, response = "Area", yaxis.DOY = F, xAxis = T, d.xaxis = F, pane = "November", axis.Ly = NULL, iter = 500)
screen()
density_plot(out_min_month, "Area", type = "int", xlimit = c(-0.008,0.017))
density_plot(out_min_month, "Area", type = "exp", xlimit = c(-12,4))
funnel.plots(dat = out_min_month$`2`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "February", axis.Ly = NULL, ylimit = c(-0.03,0.025), iter = 500)
funnel.plots(dat = out_min_month$`5`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "May", axis.Ly = NULL, ylimit = c(-0.025,0.04), iter = 500)
funnel.plots(dat = out_min_month$`8`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "August", axis.Ly = NULL, ylimit = c(-0.025,0.03), iter = 500, funnel.y = expression("Minimum-Flow | %Change"%.%"Decade"^-1))
funnel.plots(dat = out_min_month$`11`, response = "Area", yaxis.DOY = F, xAxis = T, d.xaxis = F, pane = "November", axis.Ly = NULL, iter = 500)
screen()
density_plot(out_min_month, "Area", type = "int", xlimit = c(-0.008,0.017))
density_plot(out_min_month, "Area", type = "exp", xlimit = c(-12,4))
funnel.plots(dat = out_min_month$`2`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "February", axis.Ly = NULL, ylimit = c(-0.03,0.025), iter = 500)
funnel.plots(dat = out_min_month$`5`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "May", axis.Ly = NULL, ylimit = c(-0.025,0.04), iter = 500)
funnel.plots(dat = out_min_month$`8`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "August", axis.Ly = NULL, ylimit = c(-0.025,0.03), iter = 500, funnel.y = expression("Minimum-Flow | %Change"%.%"Decade"^-1))
funnel.plots(dat = out_min_month$`11`, response = "Area", yaxis.DOY = F, xAxis = T, d.xaxis = F, pane = "November", axis.Ly = NULL, ylimit = c(-0.02,0.04), iter = 500)
screen()
density_plot(out_min_month, "Area", type = "int", xlimit = c(-0.008,0.017))
density_plot(out_min_month, "Area", type = "exp", xlimit = c(-12,4))
funnel.plots(dat = out_min_month$`2`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "February", axis.Ly = NULL, ylimit = c(-0.03,0.025), iter = 500)
funnel.plots(dat = out_min_month$`5`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "May", axis.Ly = NULL, ylimit = c(-0.025,0.04), iter = 500)
funnel.plots(dat = out_min_month$`8`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "August", axis.Ly = NULL, ylimit = c(-0.025,0.03), iter = 500, funnel.y = expression("Minimum-Flow | %Change"%.%"Decade"^-1))
funnel.plots(dat = out_min_month$`11`, response = "Area", yaxis.DOY = F, xAxis = T, d.xaxis = F, pane = "November", axis.Ly = NULL, ylimit = c(-0.015,0.04), iter = 500)
screen()
density_plot(out_min_month, "Area", type = "int", xlimit = c(-0.008,0.017))
density_plot(out_min_month, "Area", type = "exp", xlimit = c(-12,4))
funnel.plots(dat = out_min_month$`2`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "February", axis.Ly = NULL, ylimit = c(-0.03,0.025), iter = 500)
funnel.plots(dat = out_min_month$`5`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "May", axis.Ly = NULL, ylimit = c(-0.025,0.04), iter = 500)
funnel.plots(dat = out_min_month$`8`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "August", axis.Ly = NULL, ylimit = c(-0.025,0.03), iter = 500, funnel.y = expression("Minimum-Flow | %Change"%.%"Decade"^-1))
funnel.plots(dat = out_min_month$`11`, response = "Area", yaxis.DOY = F, xAxis = T, d.xaxis = F, pane = "November", axis.Ly = NULL, ylimit = c(-0.01,0.04), iter = 500)
screen()
density_plot(out_min_month, "Area", type = "int", xlimit = c(-0.008,0.017))
density_plot(out_min_month, "Area", type = "exp", xlimit = c(-12,4))
funnel.plots(dat = out_min_month$`2`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "February", axis.Ly = NULL, ylimit = c(-0.03,0.025), iter = 500)
funnel.plots(dat = out_min_month$`5`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "May", axis.Ly = NULL, ylimit = c(-0.025,0.04), iter = 500)
funnel.plots(dat = out_min_month$`8`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "August", axis.Ly = NULL, ylimit = c(-0.025,0.03), iter = 500, funnel.y = expression("Minimum-Flow | %Change"%.%"Decade"^-1))
funnel.plots(dat = out_min_month$`11`, response = "Area", yaxis.DOY = F, xAxis = T, d.xaxis = F, pane = "November", axis.Ly = NULL, ylimit = c(-0.02,0.04), iter = 500)
load("min_month.RData")
pdf("Fig4_Min-Monthly-Density-Funnel.pdf", width = 11, height = 8.5)
screen()
density_plot(out_min_month, "Area", type = "int", xlimit = c(-0.008,0.017))
density_plot(out_min_month, "Area", type = "exp", xlimit = c(-12,4))
funnel.plots(dat = out_min_month$`2`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "February", axis.Ly = NULL, ylimit = c(-0.03,0.025), iter = 500)
funnel.plots(dat = out_min_month$`5`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "May", axis.Ly = NULL, ylimit = c(-0.025,0.04), iter = 500)
funnel.plots(dat = out_min_month$`8`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "August", axis.Ly = NULL, ylimit = c(-0.025,0.03), iter = 500, funnel.y = expression("Minimum-Flow | %Change"%.%"Decade"^-1))
funnel.plots(dat = out_min_month$`11`, response = "Area", yaxis.DOY = F, xAxis = T, d.xaxis = F, pane = "November", axis.Ly = NULL, ylimit = c(-0.02,0.04), iter = 500)
dev.off()
screen()
density_plot(out_med_month, "Area", type = "int", xlimit = c(-0.008,0.017))
density_plot(out_med_month, "Area", type = "exp", xlimit = c(-12,4))
funnel.plots(dat = out_med_month$`2`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "February", axis.Ly = NULL, iter = 500)
funnel.plots(dat = out_med_month$`5`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "May", axis.Ly = NULL,  iter = 500)
funnel.plots(dat = out_med_month$`8`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "August", axis.Ly = NULL, iter = 500, funnel.y = expression("Medimum-Flow | %Change"%.%"Decade"^-1))
funnel.plots(dat = out_med_month$`11`, response = "Area", yaxis.DOY = F, xAxis = T, d.xaxis = F, pane = "November", axis.Ly = NULL, iter = 500)
load("med_month.RData")
#pdf("Fig4_Max-Monthly-Density-Funnel.pdf", width = 11, height = 8.5)
screen()
density_plot(out_med_month, "Area", type = "int", xlimit = c(-0.008,0.017))
density_plot(out_med_month, "Area", type = "exp", xlimit = c(-12,4))
funnel.plots(dat = out_med_month$`2`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "February", axis.Ly = NULL, iter = 500)
funnel.plots(dat = out_med_month$`5`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "May", axis.Ly = NULL,  iter = 500)
funnel.plots(dat = out_med_month$`8`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "August", axis.Ly = NULL, iter = 500, funnel.y = expression("Medimum-Flow | %Change"%.%"Decade"^-1))
funnel.plots(dat = out_med_month$`11`, response = "Area", yaxis.DOY = F, xAxis = T, d.xaxis = F, pane = "November", axis.Ly = NULL, iter = 500)
screen()
density_plot(out_med_month, "Area", type = "int", xlimit = c(-0.008,0.017))
density_plot(out_med_month, "Area", type = "exp", xlimit = c(-12,4))
funnel.plots(dat = out_med_month$`2`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "February", axis.Ly = NULL, ylimit = c(-0.02,0.04), iter = 500)
funnel.plots(dat = out_med_month$`5`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "May", axis.Ly = NULL,  iter = 500)
funnel.plots(dat = out_med_month$`8`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "August", axis.Ly = NULL, iter = 500, funnel.y = expression("Medimum-Flow | %Change"%.%"Decade"^-1))
funnel.plots(dat = out_med_month$`11`, response = "Area", yaxis.DOY = F, xAxis = T, d.xaxis = F, pane = "November", axis.Ly = NULL, iter = 500)
screen()
density_plot(out_med_month, "Area", type = "int", xlimit = c(-0.008,0.017))
density_plot(out_med_month, "Area", type = "exp", xlimit = c(-12,4))
funnel.plots(dat = out_med_month$`2`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "February", axis.Ly = NULL, ylimit = c(-0.025,0.04), iter = 500)
funnel.plots(dat = out_med_month$`5`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "May", axis.Ly = NULL,  iter = 500)
funnel.plots(dat = out_med_month$`8`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "August", axis.Ly = NULL, iter = 500, funnel.y = expression("Medimum-Flow | %Change"%.%"Decade"^-1))
funnel.plots(dat = out_med_month$`11`, response = "Area", yaxis.DOY = F, xAxis = T, d.xaxis = F, pane = "November", axis.Ly = NULL, iter = 500)
screen()
density_plot(out_med_month, "Area", type = "int", xlimit = c(-0.008,0.017))
density_plot(out_med_month, "Area", type = "exp", xlimit = c(-12,4))
funnel.plots(dat = out_med_month$`2`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "February", axis.Ly = NULL, ylimit = c(-0.025,0.035), iter = 500)
funnel.plots(dat = out_med_month$`5`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "May", axis.Ly = NULL,  iter = 500)
funnel.plots(dat = out_med_month$`8`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "August", axis.Ly = NULL, iter = 500, funnel.y = expression("Medimum-Flow | %Change"%.%"Decade"^-1))
funnel.plots(dat = out_med_month$`11`, response = "Area", yaxis.DOY = F, xAxis = T, d.xaxis = F, pane = "November", axis.Ly = NULL, iter = 500)
screen()
density_plot(out_med_month, "Area", type = "int", xlimit = c(-0.008,0.017))
density_plot(out_med_month, "Area", type = "exp", xlimit = c(-12,4))
funnel.plots(dat = out_med_month$`2`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "February", axis.Ly = NULL, ylimit = c(-0.025,0.03), iter = 500)
funnel.plots(dat = out_med_month$`5`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "May", axis.Ly = NULL,  iter = 500)
funnel.plots(dat = out_med_month$`8`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "August", axis.Ly = NULL, iter = 500, funnel.y = expression("Medimum-Flow | %Change"%.%"Decade"^-1))
funnel.plots(dat = out_med_month$`11`, response = "Area", yaxis.DOY = F, xAxis = T, d.xaxis = F, pane = "November", axis.Ly = NULL, iter = 500)
screen()
density_plot(out_med_month, "Area", type = "int", xlimit = c(-0.008,0.017))
density_plot(out_med_month, "Area", type = "exp", xlimit = c(-12,4))
funnel.plots(dat = out_med_month$`2`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "February", axis.Ly = NULL, ylimit = c(-0.025,0.03), iter = 500)
funnel.plots(dat = out_med_month$`5`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "May", axis.Ly = NULL, ylimit = c(-0.025,0.04),  iter = 500)
funnel.plots(dat = out_med_month$`8`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "August", axis.Ly = NULL, iter = 500, funnel.y = expression("Medimum-Flow | %Change"%.%"Decade"^-1))
funnel.plots(dat = out_med_month$`11`, response = "Area", yaxis.DOY = F, xAxis = T, d.xaxis = F, pane = "November", axis.Ly = NULL, iter = 500)
screen()
density_plot(out_med_month, "Area", type = "int", xlimit = c(-0.008,0.017))
density_plot(out_med_month, "Area", type = "exp", xlimit = c(-12,4))
funnel.plots(dat = out_med_month$`2`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "February", axis.Ly = NULL, ylimit = c(-0.025,0.03), iter = 500)
funnel.plots(dat = out_med_month$`5`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "May", axis.Ly = NULL, ylimit = c(-0.025,0.04),  iter = 500)
funnel.plots(dat = out_med_month$`8`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "August", axis.Ly = NULL, ylimit = c(-0.025,0.03), iter = 500, funnel.y = expression("Medimum-Flow | %Change"%.%"Decade"^-1))
funnel.plots(dat = out_med_month$`11`, response = "Area", yaxis.DOY = F, xAxis = T, d.xaxis = F, pane = "November", axis.Ly = NULL, iter = 500)
screen()
density_plot(out_med_month, "Area", type = "int", xlimit = c(-0.008,0.017))
density_plot(out_med_month, "Area", type = "exp", xlimit = c(-12,4))
funnel.plots(dat = out_med_month$`2`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "February", axis.Ly = NULL, ylimit = c(-0.025,0.03), iter = 500)
funnel.plots(dat = out_med_month$`5`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "May", axis.Ly = NULL, ylimit = c(-0.025,0.04),  iter = 500)
funnel.plots(dat = out_med_month$`8`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "August", axis.Ly = NULL, ylimit = c(-0.025,0.03), iter = 500, funnel.y = expression("Medimum-Flow | %Change"%.%"Decade"^-1))
funnel.plots(dat = out_med_month$`11`, response = "Area", yaxis.DOY = F, xAxis = T, d.xaxis = F, pane = "November", axis.Ly = NULL, ylimit = c(-0.02,0.05), iter = 500)
screen()
density_plot(out_med_month, "Area", type = "int", xlimit = c(-0.008,0.017))
density_plot(out_med_month, "Area", type = "exp", xlimit = c(-12,4))
funnel.plots(dat = out_med_month$`2`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "February", axis.Ly = NULL, ylimit = c(-0.025,0.03), iter = 500)
funnel.plots(dat = out_med_month$`5`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "May", axis.Ly = NULL, ylimit = c(-0.025,0.04),  iter = 500)
funnel.plots(dat = out_med_month$`8`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "August", axis.Ly = NULL, ylimit = c(-0.025,0.03), iter = 500, funnel.y = expression("Medimum-Flow | %Change"%.%"Decade"^-1))
funnel.plots(dat = out_med_month$`11`, response = "Area", yaxis.DOY = F, xAxis = T, d.xaxis = F, pane = "November", axis.Ly = NULL, ylimit = c(-0.02,0.04), iter = 500)
load("med_month.RData")
pdf("Fig4_Max-Monthly-Density-Funnel.pdf", width = 11, height = 8.5)
screen()
density_plot(out_med_month, "Area", type = "int", xlimit = c(-0.008,0.017))
density_plot(out_med_month, "Area", type = "exp", xlimit = c(-12,4))
funnel.plots(dat = out_med_month$`2`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "February", axis.Ly = NULL, ylimit = c(-0.025,0.03), iter = 500)
funnel.plots(dat = out_med_month$`5`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "May", axis.Ly = NULL, ylimit = c(-0.025,0.04),  iter = 500)
funnel.plots(dat = out_med_month$`8`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "August", axis.Ly = NULL, ylimit = c(-0.025,0.03), iter = 500, funnel.y = expression("Medimum-Flow | %Change"%.%"Decade"^-1))
funnel.plots(dat = out_med_month$`11`, response = "Area", yaxis.DOY = F, xAxis = T, d.xaxis = F, pane = "November", axis.Ly = NULL, ylimit = c(-0.02,0.04), iter = 500)
dev.off()
load("med_month.RData")
pdf("Fig4_Med-Monthly-Density-Funnel.pdf", width = 11, height = 8.5)
screen()
density_plot(out_med_month, "Area", type = "int", xlimit = c(-0.008,0.017))
density_plot(out_med_month, "Area", type = "exp", xlimit = c(-12,4))
funnel.plots(dat = out_med_month$`2`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "February", axis.Ly = NULL, ylimit = c(-0.025,0.03), iter = 500)
funnel.plots(dat = out_med_month$`5`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "May", axis.Ly = NULL, ylimit = c(-0.025,0.04),  iter = 500)
funnel.plots(dat = out_med_month$`8`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "August", axis.Ly = NULL, ylimit = c(-0.025,0.03), iter = 500, funnel.y = expression("Medimum-Flow | %Change"%.%"Decade"^-1))
funnel.plots(dat = out_med_month$`11`, response = "Area", yaxis.DOY = F, xAxis = T, d.xaxis = F, pane = "November", axis.Ly = NULL, ylimit = c(-0.02,0.04), iter = 500)
dev.off()
load("max_month.RData")
pdf("Fig4_Max-Monthly-Density-Funnel.pdf", width = 11, height = 8.5)
screen()
density_plot(out_max_month, "Area", type = "int", xlimit = c(-0.008,0.017))
density_plot(out_max_month, "Area", type = "exp", xlimit = c(-12,4))
funnel.plots(dat = out_max_month$`2`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "February", axis.Ly = NULL, ylimit = c(-0.03,0.025), iter = 500)
funnel.plots(dat = out_max_month$`5`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "May", axis.Ly = NULL, ylimit = c(-0.02,0.02), iter = 500)
funnel.plots(dat = out_max_month$`8`, response = "Area", yaxis.DOY = F, xAxis = F, d.xaxis = F, pane = "August", axis.Ly = NULL, ylimit = c(-0.04,0.02), iter = 500, funnel.y = expression("Maximum-Flow | %Change"%.%"Decade"^-1))
funnel.plots(dat = out_max_month$`11`, response = "Area", yaxis.DOY = F, xAxis = T, d.xaxis = F, pane = "November", axis.Ly = NULL, ylimit = c(-0.02,0.04), iter = 500)
dev.off()
library(tidyverse); library(stringr)
#Load/Organize Annual Data
load("03_Data_Annual.RData")
logit = function(p){log(p/(1-p))}
Y.Data = Y.Data %>% group_by(Station.ID) %>% mutate(med.log.sd = scale(Median.F, center = F), max.log.sd = scale(Max.F, center = F), min.log.sd = scale(Min.F, center = F), DOY2.logit = logit(DOY2/365), Year.Center = Year-1988)
#Load/Orgnize Montly Data
load("03_Data_Monthly.RData")
M.Data = M.Data %>% group_by(Station.ID) %>% mutate(med.log.sd = scale(median.M.flow, center = F), max.log.sd = scale(max.M.flow, center = F), min.log.sd = scale(min.M.flow, center = F), Year.Center = Year-1988)
#Scaling the data by site has no impact on the results, rather it only stands to reduce the likelyhood of computational issues during model bootstraping.
#Incorporate the Climate Data
setwd("~/sfuvault/Simon_Fraser_University/PhD_Research/Projects/Data/Original_Data/GIS_Data/BC_Climate_Data/ClimateTrends/zonal_stats")
vars = unlist(lapply(strsplit(dir(), "-"), function(x) x[1]))
AnnualVars = vars[which(nchar(vars) == 3)]
MonthlyVars = vars[which(nchar(vars) > 3 & nchar(vars)<7)]
#Annual
for(i in AnnualVars){
cDat = read.table(paste(i,"-stats.txt",sep = ""), header = T, as.is = T) %>% select(file, std)
names(cDat) = c("Station.ID", paste(i,".sd", sep = ""))
Y.Data = dplyr::left_join(Y.Data, cDat, by = "Station.ID")
}
Y.Data = Y.Data %>% ungroup(); rm(cDat, AnnualVars, i, logit, vars)
#Monthly
vars = unique(str_extract(string = MonthlyVars, pattern = "([^0-9]){3,}"))
M.Data = lapply(vars,function(x){
clim = MonthlyVars[grep(pattern = x, MonthlyVars)] %>% paste(.,"-stats.txt", sep = "") %>%
lapply(., function(y){
read_table(y) %>% select(file, std) %>% mutate(nMonth = as.numeric(str_extract(string = y, pattern = "([0-9]{2})")))
}) %>% bind_rows()
names(clim) = c("Station.ID",paste(x,".sd", sep = ""),"nMonth")
M.Data <<- left_join(M.Data, clim, by = c("Station.ID","nMonth"))
})[[length(vars)]] %>% ungroup()
rm(vars, MonthlyVars)
ls()
head(Y.Data)
setwd("~/sfuvault/Simon_Fraser_University/PhD_Research/Projects/River-Network-Flow-Trends")
# this function fits slopes to real data
fit_slopes <- function(flow.dat, response, pred.var, vars) {
area_dat <- unique(flow.dat[,c("Station.ID", vars)])
equation <- as.formula(paste(response,"~Year.Center"))
models <- plyr::ddply(flow.dat,"Station.ID", function(x){
library(nlme)
mod <- gls(equation, correlation = corAR1(), data = x)
slope <- coef(mod)[[2]]
intercept <- coef(mod)[[1]]
se <- summary(mod)$tTable[2,2]
sigma <- mod$sigma
phi <- coef(mod$model[[1]], unconstrained = F)[[1]]
data.frame(intercept,slope,se,sigma,phi)
})
models <- plyr::join(models,area_dat, by = "Station.ID")
models
}
# this function takes a data frame from fit_slopes() and generates a simulated
# time series (WITHOUT SLOPE) plus a gls() fit to that simulated data
sim_slopes <- function(slope.dat, yrs, return_ts = FALSE){
out <- plyr::adply(slope.dat, 1, function(x) {
y <- as.numeric(arima.sim(n = length(yrs),
model = list(order = c(1, 0, 0), ar = x$phi),
mean = 0, sd = x$sigma)) + x$intercept
mod_sim <- gls(y~yrs, correlation = corAR1(), control = list(maxIter = 1000, msMaxIter = 1000))
slope_sim <- coef(mod_sim)[[2]]
se_sim <- summary(mod_sim)$tTable[2,2]
if (!return_ts) {
data.frame(slope_sim, se_sim)
} else {
data.frame(y, yrs)
}
})
if (return_ts) out <- out[,c("Station.ID", "yrs", "y")]
out
}
# this function fits a gls model with a variance structure for the residual error
# slopes and area are both vectors
fit_var <- function(slopes, ind) {
scale_factor <- var(slopes)
scaled_slope <- slopes / scale_factor
x <- sqrt(ind)
x <- x - mean(x)
tryCatch({
m <- gls(scaled_slope~x, weights = varExp(form= ~sqrt(ind)/1e3),
control = glsControl(maxIter = 1000L, msMaxIter = 1000L))
varexp <- m$model[[1]][[1]]
sigma <- m$sigma * scale_factor
intercept <- coef(m)[[1]] * scale_factor
slope = m$coefficients[[2]] * scale_factor
slopePval = summary(m)[[18]][8]
data.frame(varexp, sigma, intercept, slope, slopePval)
}, .error = function(e) {
data.frame(varexp = NA, sigma = NA, intercept = NA, slope = NA, slopePval = NA)
})
}
# wrapper function for analysis of individual predictor variables.
null_sim <- function(flow.dat, response, pred.var, vars, iter, .parallel){
yrs <- unique(flow.dat$Year.Center)
real_slopes <- fit_slopes(flow.dat, response, pred.var, vars)
example_ts <- sim_slopes(slope.dat = real_slopes, yrs = yrs, return_ts = TRUE)
sim_varexp <- plyr::ldply(seq_len(iter), function(i){
simulated_slopes <- sim_slopes(slope.dat = real_slopes, yrs = yrs)
cols = names(simulated_slopes)
out <- fit_var(simulated_slopes$slope_sim, ind = simulated_slopes[,grep(pred.var, cols)])
out$.n <- i
out
},.progress = "text", .parallel = .parallel)
cols = names(real_slopes)
real_varexp <- fit_var(real_slopes$slope, ind = real_slopes[,grep(pred.var, cols)])
list(real_varexp = real_varexp, real_slopes = real_slopes,
sim_varexp = sim_varexp, example_ts = example_ts)
}
# wrapper function to run analyses across all predictor variables.
iter_null_sim <- function(flow.dat, response, pred.vars, vars, iter, .parallel = FALSE){
sapply(pred.vars, function(x){
null_sim(flow.dat, response, x, vars, iter, .parallel)
}, simplify = F, USE.NAMES = T)
}
set.seed(123)
vars = c("Area","emt.sd","ext.sd","map.sd","mat.sd","pas.sd")
fit_slopes(Y.Data, "DOY2.logit", "Area", vars)
real_slopes = fit_slopes(Y.Data, "DOY2.logit", "Area", vars)
real_slopes %>% select(8:ncol(real_slopes))
zero_one = function(x) ((x-min(x)))/(diff(range(x)))
zero_one = function(x) ((x-min(x)))/(diff(range(x)))
real_slopes = real_slopes %>% select(8:ncol(real_slopes)) %>% apply(.,2,function(x) zero_one(x)) %>%
apply(.,1,function(x) sum(x)) %>% mutate(real_slopes, std.clim = .)
names(real_slopes)
head(real_slopes)
plot(std.clim~Area, data = real_slopes)
set.seed(123)
vars = c("Area","emt.sd","ext.sd","map.sd","mat.sd","pas.sd")
real_slopes = fit_slopes(Y.Data, "DOY2.logit", "Area", vars)
zero_one = function(x) ((x-min(x)))/(diff(range(x)))
real_slopes = real_slopes %>% select(8:ncol(real_slopes)) %>% apply(.,2,function(x) zero_one(x)) %>%
apply(.,1,function(x) sum(x)) %>% mutate(real_slopes, std.clim = .)
m <- gls(slope~Area, weights = varComb(varExp(form= ~sqrt(Area)/1e3), varExp(form = ~std.clim)),
control = glsControl(maxIter = 1000L, msMaxIter = 1000L), data = real_slopes)
m
real_slopes = real_slopes %>% mutate(area_std = Area/std(Area), clim_std = std.clim/std(std.clim))
real_slopes = real_slopes %>% mutate(area_std = Area/sd(Area), clim_std = std.clim/sd(std.clim))
head(real_slopes)
range(real_slopes$area_std)
range(real_slopes$clim_std)
m <- gls(slope~Area, weights = varExp(form= ~area_std + clim_std),
control = glsControl(maxIter = 1000L, msMaxIter = 1000L), data = real_slopes)
m
plot(slope~std.clim, data = real_slopes)
plot(slope~Area, data = real_slopes)
plot(slope~log(Area), data = real_slopes)
m <- gls(slope~Area, weights = varComb(varExp(form= ~area_std), varExp(form= ~clim_std)),
control = glsControl(maxIter = 1000L, msMaxIter = 1000L), data = real_slopes)
m
m <- gls(slope~Area, weights = varExp(form= ~c(area_std, clim_std)),
control = glsControl(maxIter = 1000L, msMaxIter = 1000L), data = real_slopes)
warnings()
m <- gls(slope~Area, weights = varExp(form= ~c(area_std+clim_std)),
control = glsControl(maxIter = 1000L, msMaxIter = 1000L), data = real_slopes)
summary(m)
plot(slope~area_std, data = real_slopes)
plot(slope~clim_std, data = real_slopes)
m <- gls(slope~Area, weights = varComb(varExp(form = ~sqrt(Area)), varExp(from = ~clim_std)),
control = glsControl(maxIter = 1000L, msMaxIter = 1000L), data = real_slopes)
m <- gls(slope~Area, weights = varComb(varExp(form = ~sqrt(Area)), varExp(form = ~clim_std)),
control = glsControl(maxIter = 1000L, msMaxIter = 1000L), data = real_slopes)
summary(m)
load("out_doy2.RData")
head(out_doy2)
head(out_doy2$Area$real_slopes)
head(out_doy2$Area$real_varexp)
m <- gls(slope~Area, weights = varComb(varExp(form = ~sqrt(Area)/1e3), varExp(form = ~clim_std)),
control = glsControl(maxIter = 1000L, msMaxIter = 1000L), data = real_slopes)
summary(m)
m <- gls(slope~Area, weights = varComb(varExp(form = ~sqrt(area_std)/1e3), varExp(form = ~clim_std)),
control = glsControl(maxIter = 1000L, msMaxIter = 1000L), data = real_slopes)
summary(m)
m <- gls(slope~Area, weights = varComb(varExp(form = ~sqrt(area_std)), varExp(form = ~clim_std)),
control = glsControl(maxIter = 1000L, msMaxIter = 1000L), data = real_slopes)
summary(m)
head(real_slopes)
plot(slope~Area, data = real_slopes)
plot(slope~emt.sd, data = real_slopes)
plot(slope~ext.sd, data = real_slopes)
plot(slope~clim_std, data = real_slopes)
set.seed(123)
vars = c("Area","emt.sd","ext.sd","map.sd","mat.sd","pas.sd")
real_slopes = fit_slopes(Y.Data, "DOY2.logit", "Area", vars)
zero_one = function(x) ((x-min(x)))/(diff(range(x)))
real_slopes = real_slopes %>% select(8:ncol(real_slopes)) %>% apply(.,2,function(x) zero_one(x)) %>%
apply(.,1,function(x) sum(x)) %>% mutate(real_slopes, std.clim = .)
real_slopes = real_slopes %>% mutate(area_std = Area/sd(Area), clim_std = std.clim/sd(std.clim))
m <- gls(slope~Area, weights = varComb(varExp(form = ~sqrt(area_std)), varExp(form = ~clim_std)),
control = glsControl(maxIter = 1000L, msMaxIter = 1000L), data = real_slopes)
summary(m)
plot(slope~Area, real_slopes)
plot(slope~sqrt(Area), real_slopes)
line.sims = function(df, col, LW, shade = "10", transp = T, intercept, slope, resp.sqrt, sigma, varexp){
apply(df,1,function(y){
if(transp == T) colur = paste(col,shade,sep="")
else colur = col
upper = intercept + slope*(resp.sqrt - mean(resp.sqrt)) + 1.96 * sqrt(sigma^2 * exp(2*(resp.sqrt/1e3)*y[1]))
lines(resp.sqrt, upper, col = colur, lwd = LW)
lower = intercept + slope*(resp.sqrt - mean(resp.sqrt)) - 1.96 * sqrt(sigma^2 * exp(2*(resp.sqrt/1e3)*y[1]))
lines(resp.sqrt, lower, col = colur, lwd = LW)
})}
fit_var <- function(slopes, ind) {
scale_factor <- var(slopes)
scaled_slope <- slopes / scale_factor
x <- sqrt(ind)
x <- x - mean(x)
tryCatch({
m <- gls(scaled_slope~x, weights = varExp(form= ~sqrt(ind)/1e3),
control = glsControl(maxIter = 1000L, msMaxIter = 1000L))
varexp <- m$model[[1]][[1]]
sigma <- m$sigma * scale_factor
intercept <- coef(m)[[1]] * scale_factor
slope = m$coefficients[[2]] * scale_factor
slopePval = summary(m)[[18]][8]
data.frame(varexp, sigma, intercept, slope, slopePval)
}, .error = function(e) {
data.frame(varexp = NA, sigma = NA, intercept = NA, slope = NA, slopePval = NA)
})
}
m$model[[1]][[1]]
m$sigma
coef(m)[[1]]
m$coefficients[[2]]
summary(m)[[18]][8]
summary(m)
varexp <- m$model[[1]][[1]]
sigma <- m$sigma
intercept <- coef(m)[[1]]
slope = m$coefficients[[2]]
slopePval = summary(m)[[18]][8]
df = data.frame(varexp, sigma, intercept, slope, slopePval)
m$model[[1]][[1]]
m$model[[1]]
m$model[[1]][[1]][1]
varexp <- m$model[[1]][[1]][1]
sigma <- m$sigma
intercept <- coef(m)[[1]]
slope = m$coefficients[[2]]
slopePval = summary(m)[[18]][8]
df = data.frame(varexp, sigma, intercept, slope, slopePval)
plot(slope~sqrt(Area), real_slopes)
df
line.sims(df, "blue", 2, intercept = df$intercept, slope = df$slope, resp.sqrt = sort(sqrt(real_slopes$Area)), sigma = df$sigma, varexp = df$varexp)
line.sims(df, "#F2AD00", 2, intercept = df$intercept, slope = df$slope, resp.sqrt = sort(sqrt(real_slopes$Area)), sigma = df$sigma, varexp = df$varexp)
m$model[[1]][[1]]
m$model[[1]][[2]]
varexp <- m$model[[1]][[2]][1]
df1 = data.frame(varexp, sigma, intercept, slope, slopePval)
varexp <- m$model[[1]][[1]][1]
sigma <- m$sigma
intercept <- coef(m)[[1]]
slope = m$coefficients[[2]]
slopePval = summary(m)[[18]][8]
df1 = data.frame(varexp, sigma, intercept, slope, slopePval)
varexp <- m$model[[1]][[2]][1]
df2 = data.frame(varexp, sigma, intercept, slope, slopePval)
plot(slope~sqrt(Area), real_slopes)
#Add Simulation Lines to Plotting Region.
line.sims = function(df, col, LW, shade = "10", transp = T, intercept, slope, resp.sqrt, sigma, varexp){
apply(df,1,function(y){
if(transp == T) colur = paste(col,shade,sep="")
else colur = col
upper = intercept + slope*(resp.sqrt - mean(resp.sqrt)) + 1.96 * sqrt(sigma^2 * exp(2*(resp.sqrt/1e3)*y[1]))
lines(resp.sqrt, upper, col = colur, lwd = LW)
lower = intercept + slope*(resp.sqrt - mean(resp.sqrt)) - 1.96 * sqrt(sigma^2 * exp(2*(resp.sqrt/1e3)*y[1]))
lines(resp.sqrt, lower, col = colur, lwd = LW)
})}
varexp <- m$model[[1]][[1]][1]
sigma <- m$sigma
intercept <- coef(m)[[1]]
slope = m$coefficients[[2]]
slopePval = summary(m)[[18]][8]
df1 = data.frame(varexp, sigma, intercept, slope, slopePval)
line.sims(df, "#F2AD00", 2, intercept = df$intercept, slope = df$slope, resp.sqrt = sort(sqrt(real_slopes$Area)), sigma = df$sigma, varexp = df$varexp)
varexp <- m$model[[1]][[2]][1]
df2 = data.frame(varexp, sigma, intercept, slope, slopePval)
line.sims(df, "#FF0000", 2, intercept = df$intercept, slope = df$slope, resp.sqrt = sort(sqrt(real_slopes$Area)), sigma = df$sigma, varexp = df$varexp)
plot(slope~sqrt(Area), real_slopes)
#Add Simulation Lines to Plotting Region.
line.sims = function(df, col, LW, shade = "10", transp = T, intercept, slope, resp.sqrt, sigma, varexp){
apply(df,1,function(y){
if(transp == T) colur = paste(col,shade,sep="")
else colur = col
upper = intercept + slope*(resp.sqrt - mean(resp.sqrt)) + 1.96 * sqrt(sigma^2 * exp(2*(resp.sqrt/1e3)*y[1]))
lines(resp.sqrt, upper, col = colur, lwd = LW)
lower = intercept + slope*(resp.sqrt - mean(resp.sqrt)) - 1.96 * sqrt(sigma^2 * exp(2*(resp.sqrt/1e3)*y[1]))
lines(resp.sqrt, lower, col = colur, lwd = LW)
})}
varexp <- m$model[[1]][[1]][1]
sigma <- m$sigma
intercept <- coef(m)[[1]]
slope = m$coefficients[[2]]
slopePval = summary(m)[[18]][8]
df1 = data.frame(varexp, sigma, intercept, slope, slopePval)
line.sims(df1, "#F2AD00", 2, intercept = df$intercept, slope = df$slope, resp.sqrt = sort(sqrt(real_slopes$Area)), sigma = df$sigma, varexp = df$varexp)
varexp <- m$model[[1]][[2]][1]
df2 = data.frame(varexp, sigma, intercept, slope, slopePval)
line.sims(df2, "#FF0000", 2, intercept = df$intercept, slope = df$slope, resp.sqrt = sort(sqrt(real_slopes$Area)), sigma = df$sigma, varexp = df$varexp)
<- gls(slope~Area, weights = varComb(varExp(form = ~area_std), varExp(form = ~clim_std)),
control = glsControl(maxIter = 1000L, msMaxIter = 1000L), data = real_slopes)
m <- gls(slope~Area, weights = varComb(varExp(form = ~area_std), varExp(form = ~clim_std)),
control = glsControl(maxIter = 1000L, msMaxIter = 1000L), data = real_slopes)
set.seed(123)
vars = c("Area","emt.sd","ext.sd","map.sd","mat.sd","pas.sd")
real_slopes = fit_slopes(Y.Data, "DOY2.logit", "Area", vars)
zero_one = function(x) ((x-min(x)))/(diff(range(x)))
real_slopes = real_slopes %>% select(8:ncol(real_slopes)) %>% apply(.,2,function(x) zero_one(x)) %>%
apply(.,1,function(x) sum(x)) %>% mutate(real_slopes, std.clim = .)
real_slopes = real_slopes %>% mutate(area_std = sqrt(Area)/sd(sqrt(Area)), clim_std = std.clim/sd(std.clim))
m <- gls(slope~sqrt(Area), weights = varComb(varExp(form = ~area_std), varExp(form = ~clim_std)),
control = glsControl(maxIter = 1000L, msMaxIter = 1000L), data = real_slopes)
summary(m)
plot(slope~sqrt(Area), real_slopes)
line.sims = function(df, col, LW, shade = "10", transp = T, intercept, slope, resp.sqrt, sigma, varexp){
apply(df,1,function(y){
if(transp == T) colur = paste(col,shade,sep="")
else colur = col
upper = intercept + slope*(resp.sqrt - mean(resp.sqrt)) + 1.96 * sqrt(sigma^2 * exp(2*(resp.sqrt/1e3)*y[1]))
lines(resp.sqrt, upper, col = colur, lwd = LW)
lower = intercept + slope*(resp.sqrt - mean(resp.sqrt)) - 1.96 * sqrt(sigma^2 * exp(2*(resp.sqrt/1e3)*y[1]))
lines(resp.sqrt, lower, col = colur, lwd = LW)
})}
varexp <- m$model[[1]][[1]][1]
sigma <- m$sigma
intercept <- coef(m)[[1]]
slope = m$coefficients[[2]]
slopePval = summary(m)[[18]][8]
df1 = data.frame(varexp, sigma, intercept, slope, slopePval)
line.sims(df1, "#F2AD00", 2, intercept = df$intercept, slope = df$slope, resp.sqrt = sort(sqrt(real_slopes$Area)), sigma = df$sigma, varexp = df$varexp)
varexp <- m$model[[1]][[2]][1]
df2 = data.frame(varexp, sigma, intercept, slope, slopePval)
line.sims(df2, "#FF0000", 2, intercept = df$intercept, slope = df$slope, resp.sqrt = sort(sqrt(real_slopes$Area)), sigma = df$sigma, varexp = df$varexp)
set.seed(123)
vars = c("Area","emt.sd","ext.sd","map.sd","mat.sd","pas.sd")
real_slopes = fit_slopes(Y.Data, "DOY2.logit", "Area", vars)
zero_one = function(x) ((x-min(x)))/(diff(range(x)))
real_slopes = real_slopes %>% select(8:ncol(real_slopes)) %>% apply(.,2,function(x) zero_one(x)) %>%
apply(.,1,function(x) sum(x)) %>% mutate(real_slopes, std.clim = .)
real_slopes = real_slopes %>% mutate(area_std = sqrt(Area)/sd(sqrt(Area)), clim_std = std.clim/sd(std.clim))
m <- gls(slope~sqrt(Area), weights = varExp(form = ~sqrt(area_std)+clim_std),
control = glsControl(maxIter = 1000L, msMaxIter = 1000L), data = real_slopes)
summary(m)
m <- gls(slope~sqrt(Area), weights = varExp(form = ~sqrt(area_std)*clim_std),
control = glsControl(maxIter = 1000L, msMaxIter = 1000L), data = real_slopes)
summary(m)
m <- gls(slope~sqrt(Area), weights = varExp(form = ~c(sqrt(area_std)+clim_std)),
control = glsControl(maxIter = 1000L, msMaxIter = 1000L), data = real_slopes)
summary(m)
?gls()
plot(abs(slope)~std.clim, data = real_slopes)
ggplot(real_slopes, aes(std.clim, abs(slope))) +
geom_smooth(method = "lm")
geom_smooth()
ggplot(real_slopes, aes(std.clim, abs(slope))) + geom_smooth()
